services:
  db:
    image: postgres:14
    container_name: creg_db
    restart: always
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - creg_net

  migrate:
    image: creg:latest
    container_name: creg_migrate
    env_file:
      - .env
    depends_on:
      db:
        condition: service_started
    command: >
      sh -c "
        cd backend &&
        python manage.py makemigrations --noinput &&
        python manage.py migrate --noinput &&
        python manage.py collectstatic --noinput
      "
    volumes:
      - .:/app
    restart: "no"
    networks:
      - creg_net

  web:
    build:
      context: .
      dockerfile: docker/Dockerfile
    image: creg:latest
    container_name: creg_web
    restart: always
    env_file:
      - .env
    depends_on:
      migrate:
        condition: service_completed_successfully
    command: sh -c "cd backend && python run.py"
    volumes:
      - .:/app
    ports:
      - "8137:8137"
    networks:
      - creg_net

  worker:
    image: creg:latest
    container_name: creg_worker
    restart: always
    env_file:
      - .env
    depends_on:
      migrate:
        condition: service_completed_successfully
    command: sh -c "cd backend && celery -A config worker -l info"
    volumes:
      - .:/app
    networks:
      - creg_net

  beat:
    image: creg:latest
    container_name: creg_beat
    restart: always
    env_file:
      - .env
    depends_on:
      migrate:
        condition: service_completed_successfully
    command: sh -c "cd backend && celery -A config beat -l info"
    volumes:
      - .:/app
    networks:
      - creg_net

volumes:
  db_data:

networks:
  creg_net:
