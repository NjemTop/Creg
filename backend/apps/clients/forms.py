from django import forms
import re
import phonenumbers
from django.utils.safestring import mark_safe
from django.core.exceptions import ValidationError
from django.forms import TextInput, Textarea, CheckboxInput, inlineformset_factory
from apps.company.models import Employee

from apps.clients.models import (
    Language, Client, Contact, TechnicalInfo, ServiceInfo, Integration, ClientIntegration
)


class ClientForm(forms.ModelForm):
    """–§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞–º–∏ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""

    manager = forms.ModelChoiceField(
        queryset=Employee.objects.filter(role="–ú–µ–Ω–µ–¥–∂–µ—Ä"),
        empty_label="–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞",
        required=True,
        widget=forms.Select(attrs={"class": "form-select"})
    )

    language = forms.ModelChoiceField(
        queryset=Language.objects.all(),
        empty_label="–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∫–ª–∏–µ–Ω—Ç–∞",
        required=True,
        widget=forms.Select(attrs={"class": "form-select"})
    )

    def __init__(self, *args, **kwargs):
        super(ClientForm, self).__init__(*args, **kwargs)
        for field_name, field in self.fields.items():
            if field.required:
                label = self.fields[field_name].label
                if label:
                    self.fields[field_name].label = mark_safe(label + '<span class="required-star">*</span>')

    def clean_account_name(self):
        """üìå –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã (a-z), –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤"""
        account_name = self.cleaned_data.get("account_name")

        if not re.fullmatch(r"^[a-z]+$", account_name):
            raise ValidationError("–£—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã (a-z), –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤.")

        if Client.objects.filter(account_name__iexact=account_name).exists():
            raise ValidationError(f"–ö–ª–∏–µ–Ω—Ç —Å —É—á—ë—Ç–Ω–æ–π –∑–∞–ø–∏—Å—å—é '{account_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

        return account_name

    def clean_client_name(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        client_name = self.cleaned_data.get("client_name")
        if Client.objects.filter(client_name__iexact=client_name).exists():
            raise ValidationError("–ö–ª–∏–µ–Ω—Ç —Å —Ç–∞–∫–∏–º –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return client_name

    class Meta:
        model = Client
        fields = ['client_name', 'short_name', 'account_name', 'notes', 'saas', 'language', 'manager']
        widgets = {
            "client_name": forms.TextInput(attrs={
                "class": "form-control",
                "placeholder": "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞",
                "required": 'required',
                "oninvalid": "this.setCustomValidity('–ü–æ–ª–µ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è.')",
                "oninput": "this.setCustomValidity('')"
            }),
            "short_name": forms.TextInput(attrs={
                "class": "form-control",
                "placeholder": "–ê–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–∞/–ø—Å–µ–≤–¥–æ–Ω–∏–º/–∫—Ä–∞—Ç–∫–æ–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞",
                "oninvalid": "this.setCustomValidity('–ü–æ–ª–µ –°–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è.')",
                "oninput": "this.setCustomValidity('')"
            }),
            "account_name": forms.TextInput(attrs={
                "class": "form-control",
                "placeholder": "–£—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –∫–ª–∏–µ–Ω—Ç–∞",
                "required": 'required',
                "oninvalid": "this.setCustomValidity('–ü–æ–ª–µ –£—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –∫–ª–∏–µ–Ω—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è.')",
                "oninput": "this.setCustomValidity('')"
            }),
            'notes': forms.Textarea(attrs={
                'rows': 2,
                'cols': 10,
                'class': 'form-control resizable',
                "placeholder": "–ó–¥–µ—Å—å –º–æ–≥—É—Ç –±—ã—Ç—å –∑–∞–º–µ—Ç–∫–∏ –æ –¥–∞–Ω–Ω–æ–º –∫–ª–∏–µ–Ω—Ç–µ"
            }),
            'saas': forms.CheckboxInput(attrs={
                'class': 'form-check-input'
            }),
            'language': forms.Select(attrs={
                'class': 'form-select'
            }),
            'manager': forms.Select(attrs={
                'class': 'form-select'
            })
        }


class ContactForm(forms.ModelForm):
    """–§–æ—Ä–º–∞ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞"""

    def clean_phone_number(self):
        phone = self.cleaned_data.get("phone_number")
        if not phone:
            return phone

        try:
            parsed_phone = phonenumbers.parse(phone, None)  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞–Ω—É –ø–æ –Ω–æ–º–µ—Ä—É
            if not phonenumbers.is_valid_number(parsed_phone):
                raise ValidationError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")

            return phonenumbers.format_number(parsed_phone, phonenumbers.PhoneNumberFormat.E164)
        except phonenumbers.NumberParseException:
            raise ValidationError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")

    def clean_email(self):
        """üìå –í–∞–ª–∏–¥–∞—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–æ–π email"""
        email = self.cleaned_data.get("email")

        if Contact.objects.filter(email=email).exists():
            raise ValidationError(f"–ö–æ–Ω—Ç–∞–∫—Ç —Å –ø–æ—á—Ç–æ–π '{email}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

        return email

    def __init__(self, *args, **kwargs):
        super(ContactForm, self).__init__(*args, **kwargs)
        for field_name, field in self.fields.items():
            if field.required:
                label = self.fields[field_name].label
                if label:
                    self.fields[field_name].label = mark_safe(label + ' <span class="required-star">*</span>')

    class Meta:
        model = Contact
        fields = ['first_name', 'last_name', 'email', 'phone_number', 'notes']
        widgets = {
            "first_name": TextInput(attrs={
                "class": "form-control",
                "placeholder": "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞",
                "required": 'required'
            }),
            "last_name": TextInput(attrs={
                "class": "form-control",
                "placeholder": "–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∫–æ–Ω—Ç–∞–∫—Ç–∞",
                "required": 'required'
            }),
            "email": TextInput(attrs={
                "class": "form-control",
                "placeholder": "–í–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç—É –∫–æ–Ω—Ç–∞–∫—Ç–∞",
                "required": 'required'
            }),
            'notes': Textarea(attrs={
                'rows': 2,
                'cols': 10,
                'class': 'form-control resizable',
                "placeholder": "–ü—Ä–∏–º–µ—á–∞–Ω–∏—è –∫ –∫–æ–Ω—Ç–∞–∫—Ç—É"
            }),
        }


class TechnicalInfoForm(forms.ModelForm):
    """–§–æ—Ä–º–∞ –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ"""
    def __init__(self, *args, **kwargs):
        super(TechnicalInfoForm, self).__init__(*args, **kwargs)
        for field_name, field in self.fields.items():
            if field.required:
                label = self.fields[field_name].label
                if label:
                    self.fields[field_name].label = mark_safe(label + ' <span class="required-star">*</span>')

    class Meta:
        model = TechnicalInfo
        fields = ['server_version']
        widgets = {
            "server_version": TextInput(attrs={
                "class": "form-control",
                "placeholder": "–í–µ—Ä—Å–∏—è –ø—Ä–∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏–∏",
                "required": 'required'
            }),
        }


class ServiceInfoForm(forms.ModelForm):
    """–§–æ—Ä–º–∞ –¥–ª—è —Å–µ—Ä–≤–∏—Å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
    class Meta:
        model = ServiceInfo
        fields = ['manager']
        widgets = {
            "manager": forms.Select(attrs={"class": "form-select"}),
        }

# –§–æ—Ä–º—Å–µ—Ç—ã (–≥—Ä—É–ø–ø—ã —Ñ–æ—Ä–º –≤–Ω—É—Ç—Ä–∏ —Ñ–æ—Ä–º—ã –∫–ª–∏–µ–Ω—Ç–∞)
ContactFormSet = inlineformset_factory(Client, Contact, form=ContactForm, extra=1, can_delete=True)
