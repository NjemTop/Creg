import logging
import traceback
from celery import shared_task
from django.core.mail.backends.smtp import EmailBackend
from django.db import transaction
from django.utils import timezone
from apps.mailings.services.base.email_sender import EmailSender
from .logging_utils import send_ws_event, log_event, get_mailing_logger
from .models import Mailing, MailingRecipient, MailingTestRecipient, MailingStatus, RecipientStatus, MailingMode
from apps.clients.models import Client
from apps.configurations.models import SMTPSettings

def get_smtp_backend():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç EmailBackend –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ SMTP.

    –í—ã–±–∏—Ä–∞–µ—Ç –ø–µ—Ä–≤—É—é –≤–∫–ª—é—á—ë–Ω–Ω—É—é –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ ``SMTPSettings`` –∏
    –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç :class:`EmailBackend`. –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–π
    –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ—Ç, –≤–æ–∑–±—É–∂–¥–∞–µ—Ç ``ValueError``.
    """
    smtp = SMTPSettings.objects.filter(enabled=True).first()

    if not smtp:
        raise ValueError("SMTP-–æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞. –í–∫–ª—é—á–∏—Ç–µ –µ—ë –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")

    return EmailBackend(
        host=smtp.smtp_host,
        port=smtp.smtp_port,
        username=smtp.smtp_user,
        password=smtp.smtp_password,
        use_tls=smtp.use_tls,
        use_ssl=smtp.use_ssl,
        fail_silently=False
    )


def populate_prod_recipients(mailing):
    """–°–æ–∑–¥–∞—ë—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω-—Ä–∞—Å—Å—ã–ª–∫–∏.

    –ï—Å–ª–∏ —É —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π, –º–µ—Ç–æ–¥ –ø–æ–¥–±–µ—Ä—ë—Ç –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤,
    –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ —è–∑—ã–∫—É, –∏ —Å–æ–∑–¥–∞—Å—Ç –∑–∞–ø–∏—Å–∏ :class:`MailingRecipient` –¥–ª—è –∫–∞–∂–¥–æ–≥–æ
    –∫–æ–Ω—Ç–∞–∫—Ç–∞ —Å —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏.

    Args:
        mailing (:class:`Mailing`): –û–±—ä–µ–∫—Ç —Ä–∞—Å—Å—ã–ª–∫–∏, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è
            –ø–æ–ª—É—á–∞—Ç–µ–ª–∏.

    Returns:
        int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π.
    """
    clients = Client.objects.filter(contact_status=True)
    if mailing.language:
        clients = clients.filter(language=mailing.language)

    created = 0
    for client in clients:
        for contact in client.contacts.filter(notification_update=True):
            MailingRecipient.objects.create(
                mailing=mailing,
                client=client,
                email=contact.email,
            )
            created += 1
    return created


@shared_task(bind=True)
def send_mailing_task(self, mailing_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.

    –ó–∞–¥–∞—á–∞ Celery, –∫–æ—Ç–æ—Ä–∞—è —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π, –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç
    SMTP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∏—Å—å–º–∞. –í –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–±–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç
    —Å–æ–±—ã—Ç–∏—è –ø–æ WebSocket –∏ –ø–∏—à–µ—Ç –ª–æ–≥–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.

    Args:
        mailing_id (int): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ä–∞—Å—Å—ã–ª–∫–∏.

    Raises:
        RuntimeError: –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
            –≤–∞–ª–∏–¥–Ω–∞—è SMTP-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è.
    """
    try:
        mailing = Mailing.objects.get(id=mailing_id)
        mail_logger = get_mailing_logger(mailing.id)
        mailing.status = MailingStatus.IN_PROGRESS
        mailing.started_at = timezone.now()
        mailing.save()

        send_ws_event(
            mailing.id,
            "status",
            {"code": mailing.status, "display": mailing.get_status_display()},
        )
        log_event(mailing.id, "info", f"üì® [{self.request.id}] –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ (–†–µ–∂–∏–º: {mailing.mode}, –Ø–∑—ã–∫: {mailing.language}).")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π (—Ç–µ—Å—Ç –∏–ª–∏ –ø—Ä–æ–¥)
        recipients = (
            MailingTestRecipient.objects.filter(mailing=mailing, status=RecipientStatus.PENDING)
            if mailing.mode == MailingMode.TEST
            else MailingRecipient.objects.filter(mailing=mailing, status=RecipientStatus.PENDING)
        )

        if not recipients.exists() and mailing.mode == MailingMode.PROD:
            populate_prod_recipients(mailing)
            recipients = MailingRecipient.objects.filter(mailing=mailing, status=RecipientStatus.PENDING)

        if not recipients.exists():
            error_msg = f"‚ö†Ô∏è [{self.request.id}] –†–∞—Å—Å—ã–ª–∫–∞ {mailing.id} –ø—Ä–µ—Ä–≤–∞–Ω–∞: –ù–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π."
            raise RuntimeError(error_msg)

        try:
            email_backend = get_smtp_backend()
        except ValueError as error:
            error_msg = f"üö® [{self.request.id}] –û—à–∏–±–∫–∞ SMTP: {str(error)}"
            raise RuntimeError(error_msg)

        success_count = 0
        error_count = 0

        smtp_config = {
            "SMTP": email_backend.host,
            "USER": email_backend.username or "",
            "PASSWORD": email_backend.password or "",
            "FROM": email_backend.username or "noreply@example.com",
        }

        for recipient in recipients:
            client_name = (
                recipient.client.client_name
                if getattr(recipient, "client", None)
                else "–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—É—á–∞—Ç–µ–ª—å"
            )
            try:
                lang = mailing.language.code if mailing.mode == MailingMode.TEST else (
                    recipient.client.language.code if recipient.client and recipient.client.language else "ru"
                )

                sender = EmailSender(
                    emails=[recipient.email],
                    mailing_type="standard_mailing",
                    release_type=mailing.release_type,
                    server_version=mailing.server_version,
                    ipad_version=mailing.ipad_version,
                    android_version=mailing.android_version,
                    language=lang,
                )
                sender.logger = mail_logger
                sender.error_logger = mail_logger
                sender.config.update({
                    "MAIL_SETTINGS": smtp_config,
                    "MAIL_SETTINGS_SUPPORT": smtp_config,
                })
                sender.send_email()

                recipient.status = RecipientStatus.SENT
                recipient.sent_at = timezone.now()
                recipient.error_message = ""
                success_count += 1
                log_event(
                    mailing.id,
                    "info",
                    f"üì§ [{self.request.id}] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É {client_name} <{recipient.email}>",
                )

            except Exception as error:
                recipient.status = RecipientStatus.ERROR
                error_msg = (
                    f"‚ö†Ô∏è [{self.request.id}] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç—É {client_name} <{recipient.email}>: {str(error)}"
                )
                recipient.error_message = error_msg
                error_count += 1
                log_event(mailing.id, "error", error_msg)

            recipient.save()

            send_ws_event(
                mailing.id,
                "recipient",
                {
                    "id": recipient.id,
                    "status": recipient.get_status_display(),
                    "status_code": recipient.status,
                },
            )

            send_ws_event(
                mailing.id,
                "status",
                {"code": mailing.status, "display": mailing.get_status_display()},
            )

        # –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏
        with transaction.atomic():
            mailing.completed_at = timezone.now()
            mailing.status = MailingStatus.FAILED if error_count > 0 else MailingStatus.COMPLETED
            mailing.save()
        
        log_event(
            mailing.id,
            "info",
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {success_count} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, {error_count} —Å –æ—à–∏–±–∫–∞–º–∏.",
        )

        send_ws_event(
            mailing.id,
            "status",
            {"code": mailing.status, "display": mailing.get_status_display()},
        )
        send_ws_event(
            mailing.id,
            "completed_at",
            timezone.localtime(mailing.completed_at).isoformat(),
        )

    except Exception as error:
        error_msg = f"‚ùå [{self.request.id}] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(error)}"
        error_traceback = traceback.format_exc()

        if not isinstance(error, ValueError):
            mail_logger.critical(error_msg, exc_info=True)

            mailing.status = MailingStatus.FAILED
            mailing.completed_at = timezone.now()
            mailing.error_message = error_msg
            mailing.save()

            self.update_state(
                state="FAILURE",
                meta={
                    "task_name": self.name,
                    "error": error_msg,
                    "worker": self.request.hostname,
                    "traceback": error_traceback,
                }
            )

            send_ws_event(
                mailing.id,
                "status",
                {"code": mailing.status, "display": mailing.get_status_display()},
            )
            send_ws_event(
                mailing.id,
                "completed_at",
                timezone.localtime(mailing.completed_at).isoformat(),
            )
            log_event(mailing_id, "critical", error_msg)

        raise
